import React, { useEffect, useRef, useState } from "react";

// React-Icons рдХреЛ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ рдФрд░ рдЗрдореЛрдЬреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ

export function EcoSortChatbot({ open, setOpen }) {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [listening, setListening] = useState(false);
  const [lang, setLang] = useState("en-IN");
  const [reportId, setReportId] = useState("");
  const messagesRef = useRef(null);
  const recognitionRef = useRef(null);
  const isInitialMount = useRef(true);

  // Languages remain the same
  const languages = [
    { code: "en-IN", label: "English" },
    { code: "hi-IN", label: "рд╣рд┐рдиреНрджреА" },
    { code: "or-IN", label: "рмУрмбрм╝рм┐рмЖ" },
    { code: "mr-IN", label: "рдорд░рд╛рдареА" },
    { code: "ta-IN", label: "родрооро┐ро┤рпН" },
    { code: "te-IN", label: "р░др▒Жр░▓р▒Бр░Чр▒Б" },
    { code: "bn-IN", label: "ржмрж╛ржВрж▓рж╛" },
  ];

  // --- Greetings updated for EcoSort ---
  const greetings = {
    "en-IN": "Hi! I'm the EcoSort Assistant. I can help you check the status of a bin report, escalate an urgent issue, or provide information on our smart bins.",
    "hi-IN": "рдирдорд╕реНрддреЗ! рдореИрдВ рдЗрдХреЛрд╕реЙрд░реНрдЯ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдБред рдореИрдВ рдЖрдкрдХреА рдмрд┐рди рд░рд┐рдкреЛрд░реНрдЯ рдХреА рд╕реНрдерд┐рддрд┐ рджреЗрдЦрдиреЗ, рдХрд┐рд╕реА ржЬрж░рзБрж░рж┐ рдореБрджреНрджреЗ рдХреЛ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреЗрдиреЗ, рдпрд╛ рд╣рдорд╛рд░реЗ рд╕реНрдорд╛рд░реНрдЯ рдмрд┐рдиреНрд╕ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рджреЗрдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред",
    "or-IN": "рмирморм╕рнНрмХрм╛рм░! рморнБрмБ рмЗрмХрнЛрм╕рм░рнНрмЯ рмЖрм╕рм┐рм╖рнНрмЯрм╛рмгрнНрмЯред рморнБрмБ рмЖрмкрмгрмЩрнНрмХрм░ рммрм┐рмирнН рм░рм┐рмкрнЛрм░рнНрмЯрм░ рм╕рнНрмерм┐рмдрм┐ рмпрм╛рмЮрнНрмЪ рмХрм░рм┐рммрм╛рм░рнЗ, рмХрнМрмгрм╕рм┐ рмЬрм░рнБрм░рнА рм╕рморм╕рнНрнЯрм╛рмХрнБ рмкрнНрм░рм╛рмерморм┐рмХрмдрм╛ рмжрнЗрммрм╛рм░рнЗ, рмХрм┐рморнНрммрм╛ рмЖрмо рм╕рнНрморм╛рм░рнНрмЯ рммрм┐рмирнН рммрм┐рм╖рнЯрм░рнЗ рм╕рнВрмЪрмирм╛ рмжрнЗрммрм╛рм░рнЗ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рмкрм╛рм░рнЗред",
    "mr-IN": "рдирдорд╕реНрдХрд╛рд░! рдореА рдЗрдХреЛрд╕реЙрд░реНрдЯ рдЕрд╕рд┐рд╕реНрдЯрдВрдЯ рдЖрд╣реЗ. рдореА рддреБрдордЪреНрдпрд╛ рдмрд┐рди рд░рд┐рдкреЛрд░реНрдЯрдЪреА рд╕реНрдерд┐рддреА рддрдкрд╛рд╕рдгреНрдпрд╛рдд, рддрд╛рддрдбреАрдЪреНрдпрд╛ рд╕рдорд╕реНрдпреЗрд▓рд╛ рдкреНрд░рд╛рдзрд╛рдиреНрдп рджреЗрдгреНрдпрд╛рдд, рдХрд┐рдВрд╡рд╛ рдЖрдордЪреНрдпрд╛ рд╕реНрдорд╛рд░реНрдЯ рдмрд┐рдиреНрд╕рдмрджреНрджрд▓ рдорд╛рд╣рд┐рддреА рджреЗрдгреНрдпрд╛рдд рдорджрдд рдХрд░реВ рд╢рдХреЗрди.",
    "ta-IN": "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роИроХрпНроХрпЛроЪро╛ро░рпНроЯрпН роЙродро╡ро┐ропро╛ро│ро░рпН. роЙроЩрпНроХро│рпН родрпКроЯрпНроЯро┐ роЕро▒ро┐роХрпНроХрпИропро┐ройрпН роиро┐ро▓рпИропрпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХ, роЕро╡роЪро░рокрпН рокро┐ро░роЪрпНроЪро┐ройрпИроХрпНроХрпБ роорпБройрпНройрпБро░ро┐роорпИ роЕро│ро┐роХрпНроХ, роЕро▓рпНро▓родрпБ роОроЩрпНроХро│рпН ро╕рпНрооро╛ро░рпНроЯрпН родрпКроЯрпНроЯро┐роХро│рпИрокрпН рокро▒рпНро▒ро┐роп родроХро╡ро▓рпНроХро│рпИ ро╡ро┤роЩрпНроХ роОройрпНройро╛ро▓рпН роЙродро╡ роорпБроЯро┐ропрпБроорпН.",
    "te-IN": "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░Ир░Хр▒Лр░╕р░╛р░░р▒Нр░Яр▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н. р░ор▒А р░мр░┐р░ир▒Н р░░р░┐р░кр▒Лр░░р▒Нр░Яр▒Н р░пр▒Кр░Хр▒Нр░Х р░╕р▒Нр░ер░┐р░др░┐р░ир░┐ р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐, р░Ер░др▒Нр░пр░╡р░╕р░░ р░╕р░ор░╕р▒Нр░пр░Хр▒Б р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░д р░Зр░╡р▒Нр░╡р░бр░╛р░ир░┐р░Хр░┐, р░▓р▒Зр░жр░╛ р░ор░╛ р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░мр░┐р░ир▒НтАМр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░╕р░ор░╛р░Ър░╛р░░р░В р░Ер░Вр░жр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░╕р░╣р░╛р░пр░кр░бр░Чр░▓р░ир▒Б.",
    "bn-IN": "ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржЗржХрзЛрж╕рж░рзНржЯ ржЕрзНржпрж╛рж╕рж┐рж╕рзНржЯрзНржпрж╛ржирзНржЯред ржЖржорж┐ ржЖржкржирж╛рж░ ржмрж┐ржи рж░рж┐ржкрзЛрж░рзНржЯрзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рждрзЗ, ржЬрж░рзБрж░рж┐ рж╕ржорж╕рзНржпрж╛ржХрзЗ ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░ ржжрж┐рждрзЗ, ржЕржержмрж╛ ржЖржорж╛ржжрзЗрж░ рж╕рзНржорж╛рж░рзНржЯ ржмрж┐ржи рж╕ржорзНржкрж░рзНржХрзЗ рждржерзНржп ржкрзНрж░ржжрж╛ржирзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред",
  };

  // --- Quick buttons updated for EcoSort with Emojis ---
  const quickButtons = [
    { label: "Bin Full", icon: 'ЁЯЧСя╕П' },
    { label: "Damaged Bin", icon: 'ЁЯФз' },
    { label: "Sorting Error", icon: 'тЪЩя╕П' },
    { label: "Illegal Dumping", icon: 'ЁЯЪл' },
    { label: "Bin Offline", icon: 'ЁЯФМ' },
    { label: "Status", icon: 'тД╣я╕П' },
    { label: "Escalate", icon: 'ЁЯЪи' },
    { label: "Help", icon: 'тЭУ' },
  ];

  // --- Issue replies updated for EcoSort ---
  const issueReplies = {
    "en-IN": {
      "Bin Full": "Reports for full bins are typically addressed within 2-4 hours by the local collection team. Please track your report with its ID.",
      "Damaged Bin": "Maintenance teams are usually dispatched within 24 hours for damaged bins.",
      "Sorting Error": "A technical team will investigate sorting errors within 12-24 hours.",
      "Illegal Dumping": "This has been forwarded to the local sanitation authority for immediate action.",
      "Bin Offline": "A technician will be assigned to inspect the bin's power and connectivity issues within 8 hours.",
      "Status": "Please provide your Bin Report ID (e.g., BIN-1A45) to check the latest status.",
      "Escalate": "To escalate an issue, please provide the Bin Report ID. High-priority issues are reviewed every hour.",
      "Help": "You can ask about the status of a report, escalate an issue, or get information about different bin problems.",
    },
    "hi-IN": {
      "Bin Full": "рднрд░реЗ рд╣реБрдП рдбрд┐рдмреНрдмреЗ рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдкрд░ рд╕реНрдерд╛рдиреАрдп рд╕рдВрдЧреНрд░рд╣ рдЯреАрдо рджреНрд╡рд╛рд░рд╛ 2-4 рдШрдВрдЯреЗ рдХреЗ рднреАрддрд░ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХреА рдЬрд╛рддреА рд╣реИред рдХреГрдкрдпрд╛ рдЕрдкрдиреА рд░рд┐рдкреЛрд░реНрдЯ рдЖрдИрдбреА рд╕реЗ рдЯреНрд░реИрдХ рдХрд░реЗрдВред",
      "Damaged Bin": "рдХреНрд╖рддрд┐рдЧреНрд░рд╕реНрдд рдбрд┐рдмреНрдмреЗ рдХреЗ рд▓рд┐рдП рд░рдЦрд░рдЦрд╛рд╡ рдЯреАрдореЗрдВ рдЖрдорддреМрд░ рдкрд░ 24 рдШрдВрдЯреЗ рдХреЗ рднреАрддрд░ рднреЗрдЬреА рдЬрд╛рддреА рд╣реИрдВред",
      "Sorting Error": "рддрдХрдиреАрдХреА рдЯреАрдо 12-24 рдШрдВрдЯреЗ рдХреЗ рднреАрддрд░ рд╕реЙрд░реНрдЯрд┐рдВрдЧ рддреНрд░реБрдЯрд┐рдпреЛрдВ рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдЧреАред",
      "Illegal Dumping": "рдЗрд╕реЗ рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рд╕реНрд╡рдЪреНрдЫрддрд╛ рдкреНрд░рд╛рдзрд┐рдХрд░рдг рдХреЛ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред",
      "Bin Offline": "рдПрдХ рддрдХрдиреАрд╢рд┐рдпрди 8 рдШрдВрдЯреЗ рдХреЗ рднреАрддрд░ рдмрд┐рди рдХреА рдмрд┐рдЬрд▓реА рдФрд░ рдХрдиреЗрдХреНрдЯрд┐рд╡рд┐рдЯреА рд╕рдорд╕реНрдпрд╛рдУрдВ рдХрд╛ рдирд┐рд░реАрдХреНрд╖рдг рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдирд┐рдпреБрдХреНрдд рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред",
      "Status": "рдирд╡реАрдирддрдо рд╕реНрдерд┐рддрд┐ рдХреА рдЬрд╛рдВрдЪ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдмрд┐рди рд░рд┐рдкреЛрд░реНрдЯ рдЖрдИрдбреА (рдЬреИрд╕реЗ, BIN-1A45) рдкреНрд░рджрд╛рди рдХрд░реЗрдВред",
      "Escalate": "рдХрд┐рд╕реА рд╕рдорд╕реНрдпрд╛ рдХреЛ рдЖрдЧреЗ рдмрдврд╝рд╛рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдмрд┐рди рд░рд┐рдкреЛрд░реНрдЯ рдЖрдИрдбреА рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рдЙрдЪреНрдЪ-рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рд╡рд╛рд▓реЗ рдореБрджреНрджреЛрдВ рдХреА рд╣рд░ рдШрдВрдЯреЗ рд╕рдореАрдХреНрд╖рд╛ рдХреА рдЬрд╛рддреА рд╣реИред",
      "Help": "рдЖрдк рдХрд┐рд╕реА рд░рд┐рдкреЛрд░реНрдЯ рдХреА рд╕реНрдерд┐рддрд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ, рдХрд┐рд╕реА рд╕рдорд╕реНрдпрд╛ рдХреЛ рдЖрдЧреЗ рдмрдврд╝рд╛ рд╕рдХрддреЗ рд╣реИрдВ, рдпрд╛ рд╡рд┐рднрд┐рдиреНрди рдмрд┐рди рд╕рдорд╕реНрдпрд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред",
    },
    "or-IN": {
      "Bin Full": "рмкрнВрм░рнНрмгрнНрмг рммрм┐рмирнН рмкрм╛рмЗрмБ рм░рм┐рмкрнЛрм░рнНрмЯрмЧрнБрмбрм┐рмХ рм╕рм╛рмзрм╛рм░рмгрмдрмГ рни-рнк рмШрмгрнНрмЯрм╛ рмормзрнНрнЯрм░рнЗ рм╕рнНрмерм╛рмирнАрнЯ рм╕рмВрмЧрнНрм░рм╣рмХрм╛рм░рнА рмжрм│ рмжрнНрм╡рм╛рм░рм╛ рм╕рморм╛рмзрм╛рми рмХрм░рм╛рмпрм╛рмПред рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрмЩрнНрмХ рм░рм┐рмкрнЛрм░рнНрмЯ ID рм╕рм╣рм┐рмд рмЯрнНрм░рм╛рмХрнН рмХрм░рмирнНрмдрнБред",
      "Damaged Bin": "рмХрнНрм╖рмдрм┐рмЧрнНрм░рм╕рнНрмд рммрм┐рмирнН рмкрм╛рмЗрмБ рм░рмХрнНрм╖рмгрм╛рммрнЗрмХрнНрм╖рмгрмХрм╛рм░рнА рмжрм│ рм╕рм╛рмзрм╛рм░рмгрмдрмГ рнирнк рмШрмгрнНрмЯрм╛ рмормзрнНрнЯрм░рнЗ рмкрмарм╛рмпрм╛рмПред",
      "Sorting Error": "рмПрмХ рммрнИрм╖рнЯрм┐рмХ рмжрм│ рнзрни-рнирнк рмШрмгрнНрмЯрм╛ рмормзрнНрнЯрм░рнЗ рм╕рм░рнНрмЯрм┐рмВ рмдрнНрм░рнБрмЯрм┐рм░ рмЕрмирнБрм╕рмирнНрмзрм╛рми рмХрм░рм┐рммред",
      "Illegal Dumping": "рмПрм╣рм╛рмХрнБ рмдрнБрм░рмирнНрмд рмХрм╛рм░рнНрмпрнНрнЯрм╛рмирнБрм╖рнНрмарм╛рми рмкрм╛рмЗрмБ рм╕рнНрмерм╛рмирнАрнЯ рм╕рнНрн▒рмЪрнНрмЫрмдрм╛ рмкрнНрм░рм╛рмзрм┐рмХрм░рмгрмХрнБ рмкрмарм╛рмпрм╛рмЗрмЫрм┐ред",
      "Bin Offline": "рмЬрмгрнЗ рмЯрнЗрмХрнНрмирм┐рм╕рм┐рмЖрмирнН рно рмШрмгрнНрмЯрм╛ рмормзрнНрнЯрм░рнЗ рммрм┐рмирнНтАМрм░ рмкрм╛рн▒рм╛рм░рнН рмПрммрмВ рмХрмирнЗрмХрнНрмЯрм┐рмнрм┐рмЯрм┐ рм╕рморм╕рнНрнЯрм╛рм░ рмпрм╛рмЮрнНрмЪ рмХрм░рм┐рммрм╛ рмкрм╛рмЗрмБ рмирм┐рмпрнБрмХрнНрмд рм╣рнЗрммрнЗред",
      "Status": "рмирнВрмдрми рм╕рнНрмерм┐рмдрм┐ рмпрм╛рмЮрнНрмЪ рмХрм░рм┐рммрм╛рмХрнБ рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрмЩрнНрмХрм░ рммрм┐рмирнН рм░рм┐рмкрнЛрм░рнНрмЯ ID (рмЙрмжрм╛рм╣рм░рмг рм╕рнНрн▒рм░рнВрмк, BIN-1A45) рмкрнНрм░рмжрм╛рми рмХрм░рмирнНрмдрнБред",
      "Escalate": "рмХрнМрмгрм╕рм┐ рм╕рморм╕рнНрнЯрм╛рмХрнБ рмПрм╕рнНрмХрм╛рм▓рнЗрмЯрнН рмХрм░рм┐рммрм╛рмХрнБ, рмжрнЯрм╛рмХрм░рм┐ рммрм┐рмирнН рм░рм┐рмкрнЛрм░рнНрмЯ ID рмкрнНрм░рмжрм╛рми рмХрм░рмирнНрмдрнБред рмЙрмЪрнНрмЪ-рмкрнНрм░рм╛рмерморм┐рмХрмдрм╛ рмерм┐рммрм╛ рм╕рморм╕рнНрнЯрм╛рмЧрнБрмбрм╝рм┐рмХрм░ рмкрнНрм░рмдрм┐ рмШрмгрнНрмЯрм╛рм░рнЗ рм╕рморнАрмХрнНрм╖рм╛ рмХрм░рм╛рмпрм╛рмПред",
      "Help": "рмЖрмкрмг рмПрмХ рм░рм┐рмкрнЛрм░рнНрмЯрм░ рм╕рнНрмерм┐рмдрм┐ рммрм┐рм╖рнЯрм░рнЗ рмкрмЪрм╛рм░рм┐рмкрм╛рм░рм┐рммрнЗ, рмПрмХ рм╕рморм╕рнНрнЯрм╛рмХрнБ рмПрм╕рнНрмХрм╛рм▓рнЗрмЯрнН рмХрм░рм┐рмкрм╛рм░рм┐рммрнЗ, рмХрм┐рморнНрммрм╛ рммрм┐рмнрм┐рмирнНрми рммрм┐рмирнН рм╕рморм╕рнНрнЯрм╛ рммрм┐рм╖рнЯрм░рнЗ рм╕рнВрмЪрмирм╛ рмкрм╛рмЗрмкрм╛рм░рм┐рммрнЗред",
    }
  };

  // Speech recognition setup
  useEffect(() => {
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition || null;
    if (!SpeechRecognition) return;

    const rec = new SpeechRecognition();
    rec.lang = lang;
    rec.interimResults = false;
    rec.maxAlternatives = 1;

    rec.onresult = (e) => {
      const text = e.results[0][0].transcript;
      appendMessage({ from: "user", text });
      setInput(text);
      setListening(false);
      stopRecognition();
      handleBotReply(text);
    };

    rec.onerror = () => setListening(false);
    rec.onend = () => setListening(false);
    recognitionRef.current = rec;
  }, [lang]);

  useEffect(() => {
    if (messagesRef.current)
      messagesRef.current.scrollTop = messagesRef.current.scrollHeight;
  }, [messages, open]);

  // Effect for the initial greeting message when the chatbot is opened
  useEffect(() => {
    if (open && messages.length === 0) {
      const greet = greetings[lang] || greetings["en-IN"];
      appendMessage({ from: "bot", text: greet, type: "info" });
      speak(greet);
    }
  }, [open]);

  // Effect for changing the greeting message when the language is changed
  useEffect(() => {
    if (isInitialMount.current) {
      isInitialMount.current = false;
      return;
    }

    if (open) {
      const greet = greetings[lang] || greetings["en-IN"];
      appendMessage({ from: "bot", text: greet, type: "info" });
      speak(greet);
    }
  }, [lang, open]);

  function appendMessage(msg) {
    setMessages((m) => [...m, { ...msg, time: new Date().toISOString() }]);
  }

  function startRecognition() {
    if (!recognitionRef.current) return;
    try {
      recognitionRef.current.lang = lang;
      recognitionRef.current.start();
      setListening(true);
    } catch {
      setListening(false);
    }
  }

  function stopRecognition() {
    try {
      recognitionRef.current && recognitionRef.current.stop();
    } catch {}
  }

  function speak(text) {
    if (!window.speechSynthesis) return;
    const ut = new SpeechSynthesisUtterance(text);
    ut.lang = lang || "en-IN";
    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(ut);
  }

  function handleBotReply(userText) {
    const responses = issueReplies[lang] || issueReplies["en-IN"];
    let reply = "Sorry, I couldn't understand that. You can ask about a bin report's status or how to escalate an issue.";
    let type = "info";

    for (let key in responses) {
      const pattern = new RegExp(key, "i");
      if (pattern.test(userText)) {
        reply = responses[key];
        break;
      }
    }
    
    // Check for report ID in user text
    const foundReportId = userText.match(/BIN-\w+/i);
    const currentReportId = foundReportId ? foundReportId[0].toUpperCase() : reportId;

    if (/status/i.test(userText)) {
      type = "status";
      reply = currentReportId
        ? `Status for report ${currentReportId} is currently 'In Progress'. A team has been assigned.`
        : responses.Status;
    } else if (/escalate/i.test(userText)) {
      type = "urgent";
      reply = currentReportId
        ? `Report ${currentReportId} has been flagged for urgent review by the operations team.`
        : responses.Escalate;
    }

    appendMessage({ from: "bot", text: reply, type });
    speak(reply);
  }

  function handleQuickClick(btn) {
    appendMessage({ from: "user", text: btn.label });
    const responses = issueReplies[lang] || issueReplies["en-IN"];
    const reply = responses[btn.label] || "Sorry, I couldn't understand that.";
    appendMessage({ from: "bot", text: reply, type: "info" });
    speak(reply);
  }

  const fmtTime = (iso) => new Date(iso).toLocaleTimeString();

  return (
    <div>
      {open && (
        <div className="fixed bottom-6 right-6 z-50 w-96 max-h-[70vh] bg-white rounded-2xl shadow-2xl flex flex-col">
          {/* Header */}
          <div className="px-4 py-3 bg-gradient-to-r from-green-600 to-blue-500 text-white flex justify-between items-center rounded-t-2xl">
            <div className="font-semibold">EcoSort Assistant</div>
            <div className="flex gap-2 items-center">
              <select
                value={lang}
                onChange={(e) => setLang(e.target.value)}
                className="text-sm rounded px-2 py-1 bg-white/20 text-white border-none outline-none appearance-none"
              >
                {languages.map((l) => (
                  <option key={l.code} value={l.code} className="text-black">
                    {l.label}
                  </option>
                ))}
              </select>
              <button onClick={() => setOpen(false)} className="text-lg font-bold w-6 h-6 flex items-center justify-center rounded-full hover:bg-white/20 transition-colors">&times;</button>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-hidden flex flex-col">
            <div ref={messagesRef} className="flex-1 overflow-auto p-4 space-y-4 bg-gray-50 text-black">
              {messages.map((m, i) => (
                <div key={i} className={`flex ${m.from === "bot" ? "justify-start" : "justify-end"}`}>
                  <div className={`inline-block max-w-[85%] px-4 py-3 rounded-xl ${m.from === 'bot' ? 'bg-white shadow-sm' : 'bg-blue-500 text-white'} break-words`}>
                    <p className="text-sm">{m.text}</p>
                    <div className="text-xs opacity-60 mt-1 text-right">{fmtTime(m.time)}</div>
                  </div>
                </div>
              ))}
            </div>

            {/* Quick Buttons */}
            <div className="px-4 py-2 border-t bg-white flex flex-wrap gap-2">
              {quickButtons.map((b) => (
                <button
                  key={b.label}
                  onClick={() => handleQuickClick(b)}
                  className="flex items-center gap-1.5 px-3 py-1.5 rounded-full border border-gray-300 bg-gray-100 text-gray-800 text-xs font-medium hover:bg-gray-200 transition"
                >
                  <span className="text-base">{b.icon}</span> {b.label}
                </button>
              ))}
            </div>

            {/* Input */}
            <div className="px-4 py-2 border-t bg-white flex flex-col gap-2">
              <input
                value={reportId}
                onChange={(e) => setReportId(e.target.value.toUpperCase())}
                placeholder="Enter Bin Report ID (e.g., BIN-1A45)"
                className="w-full px-3 py-2 rounded-lg border bg-gray-100 text-black text-sm"
              />
              <form
                onSubmit={(e) => {
                  e.preventDefault();
                  if (!input.trim()) return;
                  appendMessage({ from: "user", text: input });
                  handleBotReply(input);
                  setInput("");
                }}
                className="flex gap-2 items-center"
              >
                <input
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder="Ask about your bin report..."
                  className="flex-1 px-3 py-2 rounded-lg border border-gray-300 bg-gray-100 text-gray-800 placeholder-gray-500"
                />
                <button
                  type="button"
                  onClick={() => (listening ? stopRecognition() : startRecognition())}
                  className={`px-3 py-2 rounded-lg border text-lg ${listening ? "bg-red-100 text-red-600 border-red-400" : "bg-gray-100 text-gray-600 border-gray-300"}`}
                >
                  {listening ? 'ЁЯФЗ' : 'ЁЯОд'}
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 rounded-lg bg-green-600 text-white hover:bg-green-700 font-semibold"
                >
                  Send
                </button>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

